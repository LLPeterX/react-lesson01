{"version":3,"sources":["components/common/FormControls/FormControls.module.css","components/common/FormControls/FormControls.jsx","utils/validators/validators.js","components/Login/Login.module.css","components/Login/Login.jsx"],"names":["module","exports","TextArea","props","input","restProps","meta","FormControl","Input","hasError","error","touched","className","styles","formControl","children","createField","placeholder","name","validators","component","text","type","validate","required","value","maxLength","textMaxLength","length","ReduxLoginForm","reduxForm","form","handleSubmit","onSubmit","formStyle","formError","s","form_item","connect","state","isAuth","auth","login","to","container","title","formData","email","password","rememberMe"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,UAAY,kC,+LCGrGC,EAAW,SAACC,GAAU,IAU1BC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBG,KAVmB,YAUGH,EAVH,mBAWjC,OAAO,kBAACI,EAAgBJ,EAAO,8CAAcC,EAAWC,MAG7CG,EAAQ,SAACL,GAAW,IACxBC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBG,KADgB,YACMH,EADN,mBAE9B,OACE,kBAACI,EAAgBJ,EAAO,2CAAWC,EAAWC,MAI5CE,EAAc,SAAC,GAA8B,EAA5BH,MAA6B,IAAtBE,EAAqB,EAArBA,KAASH,EAAY,gCAC3CM,EAAWH,EAAKI,OAASJ,EAAKK,QACpC,OACE,yBAAKC,UAAWC,IAAOC,YAAc,KAAOL,EAAWI,IAAOH,MAAQ,KACpE,6BACGP,EAAMY,UAERN,GAAY,8BAAOH,EAAKI,SAOlBM,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CjB,EAA3C,uDAAiD,GAAIkB,EAArD,uDAA0D,GAA1D,OACzB,6BAAK,kBAAC,IAAD,eAAOH,KAAMA,EAAMI,KAAK,OAAOL,YAAaA,EAAaG,UAAWA,EACzEG,SAAUJ,GAAgBhB,IAASkB,K,iCCzCrC,oEAAO,IAAMG,EAAW,SAACC,GACvB,IAAGA,EACH,MAAO,+KAQIC,EAAY,SAACC,GAAD,OAAmB,SAACF,GAC3C,GAAGA,GAASA,EAAMG,OAASD,EAAe,MAAM,4GAAN,OAA8BA,EAA9B,wD,oBCV5C3B,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,KAAO,oBAAoB,UAAY,2B,iCCD3H,iHAsCI4B,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EA3BL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAActB,EAAW,EAAXA,MAC9B,OACE,0BAAMuB,SAAUD,GAabhB,YAAY,QAAQ,QAAQ,CAACQ,KAAUhB,KACvCQ,YAAY,uCAAS,WAAW,CAACQ,KAAUhB,IAAO,CAACc,KAAM,aACzDN,YAAY,KAAM,aAAc,GAAIR,IAAO,CAACc,KAAM,YAAa,mFAE/DZ,GAAU,yBAAKE,UAAWsB,IAAUC,WAA1B,KAAwCzB,EAAxC,KACX,yBAAKE,UAAWwB,IAAEC,WAChB,8CA+BOC,uBAJS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,UAGmB,CAACE,WAA1BJ,EAvBH,SAACnC,GAOX,OAAGA,EAAMqC,OAAgB,kBAAC,IAAD,CAAUG,GAAI,aAGrC,yBAAK/B,UAAWwB,IAAEQ,WAChB,yBAAKhC,UAAWwB,IAAES,OAAlB,4BACA,yBAAKjC,UAAWwB,IAAEL,MAChB,kBAACF,EAAD,CAAgBI,SAZL,SAACa,GAGhB3C,EAAMuC,MAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.952a5989.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__YXCYV\",\"error\":\"FormControls_error__2KD-z\",\"formError\":\"FormControls_formError__35hOR\"};","import React from 'react'\r\nimport styles from './FormControls.module.css'\r\nimport {Field} from 'redux-form'\r\n\r\nexport const TextArea = (props) => {\r\n  // const hasError = meta.error && meta.touched;\r\n  // return (\r\n  //   <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n  //     <div>\r\n  //       <textarea {...input} {...props} />\r\n  //     </div>\r\n  //     {hasError && <span>{meta.error}</span>}\r\n  //   </div>\r\n  // )\r\n  const {input, meta, ...restProps} = props;\r\n  return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n  const {input, meta, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n  )\r\n}\r\n\r\nconst FormControl = ({ input, meta, ...props }) => {\r\n  const hasError = meta.error && meta.touched;\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>\r\n        {props.children}\r\n      </div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  ) \r\n}\r\n\r\n// Универсальное поле ввода\r\n// в props можно указать тип поля, напр. {type: \"password\"}\r\nexport const createField = (placeholder, name, validators, component, props={}, text=\"\") => (\r\n  <div><Field name={name} type=\"text\" placeholder={placeholder} component={component}\r\n  validate={validators} {...props}/>{text}</div>\r\n)","export const required = (value) => {\r\n  if(value) return undefined;\r\n  return \"Поле обязательно для заполнения\";\r\n};\r\n\r\nexport const maxLength20 = value => {\r\n  if(value && value.length>10) return 'Длина текста больше 50 символов';\r\n  return undefined;\r\n};\r\n\r\nexport const maxLength = (textMaxLength) => (value) => {\r\n  if(value && value.length > textMaxLength) return `Длина текста больше ${textMaxLength} символов`;\r\n  return undefined;\r\n};\r\n\r\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1BqOE\",\"title\":\"Login_title__BBiFj\",\"form\":\"Login_form__9gTZd\",\"form_item\":\"Login_form_item__1909e\"};","import React from 'react';\r\nimport s from './Login.module.css';\r\n//import {Field, reduxForm} from 'redux-form';\r\nimport {reduxForm} from 'redux-form';\r\nimport { Input, createField } from '../common/FormControls/FormControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport formStyle from '../common/FormControls/FormControls.module.css';\r\n\r\nlet LoginForm = ({handleSubmit, error}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}> \r\n      {/* <div className={s.form_item}>\r\n        <Field name={\"email\"} type=\"text\" placeholder={\"Login\"} component={Input}\r\n        validate={[required]}/>\r\n      </div>\r\n      <div className={s.form_item}>\r\n        <Field name={\"password\"} type=\"password\" placeholder={\"Password\"} component={Input}\r\n        validate={[required]}/>\r\n      </div>\r\n            <div className={s.form_item}>\r\n        <Field name={\"rememberMe\"} type={\"checkbox\"} component={Input}/> Запомнить меня\r\n      </div>\r\n */}\r\n      {createField(\"Email\",\"email\",[required],Input)}\r\n      {createField(\"Пароль\",\"password\",[required],Input, {type: \"password\"})}\r\n      {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Запомнить меня\")}\r\n      {/* error message */}\r\n      {error &&  <div className={formStyle.formError}>  {error} </div> }\r\n      <div className={s.form_item}>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nlet ReduxLoginForm = reduxForm({form: 'login'})(LoginForm);\r\n\r\nlet Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    // console.log(\"inside Login.onSubmit\\nFormData:\");\r\n    // console.log('formData');\r\n    props.login(formData.email, formData.password, formData.rememberMe);\r\n  }\r\n\r\n  if(props.isAuth)  return <Redirect to={'/profile'}/>\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <div className={s.title}>ВХОД</div>\r\n      <div className={s.form}>\r\n        <ReduxLoginForm onSubmit={onSubmit}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}